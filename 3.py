# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы
# методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к
# клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого)
# деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества
# ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где
# количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
# то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.

class Cell:
    count = 0

    def __init__(self, count):
        self.count = count

    def make_order(self, cells_in_row):
        row = ''
        i = 1
        for el in range(cells_in_row):
            if (i % 5) == 0:
                row += '*\n'
            else:
                row += '*'
            i += 1

        return row

    def __add__(self, other):
        self.count = self.count + other.count
        return self

    def __sub__(self, other):
        if (self.count - other.count) > 0:
            self.count = self.count - other.count
            return self
        else:
            return 'Количество ячеек меньше 0!'

    def __mul__(self, other):
        self.count = self.count * other.count
        return self

    def __truediv__(self, other):
        self.count = self.count % other.count
        return self

    def __str__(self):
        return f'Количество ячеек новой клетки: {self.count}'


cell_class = Cell(10)
cell_class2 = Cell(5)
print(cell_class + cell_class2)
print(cell_class - cell_class2)
print(cell_class * cell_class2)
print(cell_class / cell_class2)
print(cell_class2.make_order(23))
